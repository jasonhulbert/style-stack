@import '../../core/map.core';

$color-theme-map: (
    'brand': #0028A0,
    'primary-blue': #009FDF,
    'primary-green': #009775,
    'primary-sky': #41b6e6,
    'secondary-navy': #002e5d,
    'secondary-lime': #78be20,
    'secondary-green': #008c95,
    'secondary-yellow': #fdd824,
    'secondary-purple': #5c068c,
    'secondary-magenta': #d9017a,
    'secondary-ruby': #ba0c2f,
    'secondary-orange': #e35205
) !default;
$color-neutral-map: (
    'light': #e5e9f5,
    'white': #FFFFFF,
    'grey1': #f0f0f1,
    'grey2': #cac9c7,
    'grey3': #75787b,
    'grey4': #55565a,
    'black': #000000
) !default;
$color-util-map: (
    'confirm': #78BE20,
    'warn': #E35205,
    'deny': #BA0C2F,
    'notify': #0028A0,
    'select': #fdd824,
    'focus': #0028A0
) !default;
$color-link-map: (
    'link': #0028A0,
    'link-hover': darken(#0028A0, 10),
    'link-visited': lighten(#0028A0, 10)
) !default;
$color-all-map: map-multi-merge(
    $color-theme-map,
    $color-neutral-map,
    $color-util-map,
    $color-link-map
) !default;
$color-variant-map: map-multi-merge($color-theme-map, $color-neutral-map) !default;
$color-shades: 10, 20, 30 !default;
$color-tints: 10, 20, 30 !default;

@function color-value($color-key, $tint: 0, $shade: 0, $alpha: 1) {
    $color-value: map-get($color-all-map, $color-key);

    @if $tint != 0 {
        $color-value: lighten($color-value, $tint);
    }

    @if $shade != 0 {
        $color-value: darken($color-value, $shade);
    }

    @if $alpha != 1 {
        $color-value: rgba($color-value, $alpha);
    }

    @return $color-value;
}

@function color-lighten-until($color, $until) {
    $color: $color;
    $lightness: lightness($color);

    @if $lightness >= $until {
        @return $color;
    }

    @while $lightness < $until {
        $color: lighten($color, 1);
        $lightness: lightness($color);
    }

    @return $color;
}

@function color-darken-until($color, $until) {
    $color: $color;
    $lightness: lightness($color);

    @if $lightness <= $until {
        @return $color;
    }

    @while $lightness > $until {
        $color: darken($color, 1);
        $lightness: lightness($color);
    }

    @return $color;
}

@mixin color-styles() {
    @each $color-key, $color-value in $color-all-map {
        .color-#{$color-key} {
            color: color-value($color-key);
        }

        .color-#{$color-key}-bg {
            background-color: color-value($color-key);
        }
    }

    @each $color-key, $color-value in $color-variant-map {
        // Adds tints and shades for 'variant' colors only.
        @each $shade in $color-shades {
            .color-#{$color-key}-shade-#{$shade} {
                color: color-value($color-key, $shade: $shade);
            }

            .color-#{$color-key}-shade-#{$shade}-bg {
                background-color: color-value($color-key, $shade: $shade);
            }
        }

        @each $tint in $color-tints {
            .color-#{$color-key}-tint-#{$tint} {
                color: color-value($color-key, $tint: $tint);
            }

            .color-#{$color-key}-tint-#{$tint}-bg {
                background-color: color-value($color-key, $tint: $tint);
            }
        }
    }

    @if mixin-exists('color-hook') {
        @include color-hook();
    }
}
