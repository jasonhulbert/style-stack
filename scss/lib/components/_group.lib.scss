@import '../../core/query.core';
@import '../../core/selector.core';

$group-name: 'group' !default;
$group-divisor: 24 !default;
$group-item-width-default: $group-divisor !default;

@function group-item-width($width: auto, $divisor: $group-divisor) {
    $group-item-width: $width;

    @if type-of($width) == string {
        $group-item-width: unquote($width);
    } @else if (type-of($width) == number and unitless($width) == false) {
        $group-item-width: $width;
    } @else if type-of($width) == number and unitless($width) == true {
        $group-item-width: percentage($width / $divisor);
    }

    @return $group-item-width;
}

@mixin group() {
    display: flex;
    flex-wrap: wrap;
    flex-direction: row;
}

@mixin group-item($width: $group-divisor, $grow: 0, $shrink: 0) {
    $width: group-item-width($width);

    position: relative;
    flex-basis: $width;
    flex-grow: $grow;
    flex-shrink: $shrink;
    min-width: $width;
}

@mixin group-item-width($width: $group-divisor) {
    $width: group-item-width($width);

    flex-basis: $width;
    min-width: $width;
}

@mixin group-item-push($width) {
    margin-left: group-item-width($width);
}

@mixin group-item-pull($width) {
    margin-left: -(group-item-width($width));
}

@mixin group-break() {
    flex-basis: 100%;
    width: unset;
    height: 0;
    display: unset;
    margin: 0;
    padding: 0;
    border: 0;
}

@mixin group-disable-break() {
    display: none;
}

@mixin group-styles() {
    $name: selector-prefix($group-name);

    .#{$name} {
        @include group();
    }

    .#{$name}-item,
    [class*='#{$name}-item-'] {
        @include group-item();
    }

    .#{$name}-item-size-auto {
        @include group-item('auto');
    }

    .#{$name}-break {
        @include group-break();
    }

    // Disables 'breaks' until any specified media query is met
    [class*='#{$name}-break\@'] {
        @include group-disable-break();
    }

    // Sets default width of all children using a parent modifier.
    // Does not affect children with a size modifier.
    .#{$name}-size-auto > :not([class*='item-size-']) {
        @include group-item(auto);
    }

    @for $i from 1 through $group-divisor {
        // Sets default width of all group children.
        // Does not affect children with a size modifier.
        .#{$name}-size-#{$i} > :not([class*='item-size-']) {
            @include group-item($i);
        }

        .#{$name}-item-size-#{$i} {
            @include group-item($i);
        }

        .#{$name}-item-push-#{$i} {
            @include group-item-push($i);
        }

        .#{$name}-item-pull-#{$i} {
            @include group-item-pull($i);
        }
    }

    .#{$name}-nowrap {
        flex-wrap: nowrap;
    }

    .#{$name}-justify-around {
        justify-content: space-around;
    }

    .#{$name}-justify-between {
        justify-content: space-between;
    }

    .#{$name}-justify-center {
        justify-content: center;
    }

    .#{$name}-justify-end {
        justify-content: flex-end;
    }

    .#{$name}-align-center {
        align-items: center;
    }

    .#{$name}-align-start {
        align-items: flex-start;
    }

    .#{$name}-align-end {
        align-items: flex-end;
    }

    @each $query-key in map-keys($query-map) {
        @include query($query-key) {
            .#{$name}-item-size-auto\@#{$query-key} {
                @include group-item(auto);
            }

            // Sets default width of all group children.
            // Does not affect children with a size modifier.
            .#{$name}-size-auto\@#{$query-key} > :not([class*='item-size-']) {
                @include group-item(auto);
            }

            .#{$name}-break\@#{$query-key} {
                @include group-break();
            }

            .#{$name}-disable-break\@#{$query-key} {
                @include group-disable-break();
            }

            @for $i from 1 through $group-divisor {
                // Sets default width of all group children.
                // Does not affect children with a size modifier.
                .#{$name}-size-#{$i}\@#{$query-key} > :not([class*='item-size-']) {
                    @include group-item($i);
                }

                .#{$name}-item-size-#{$i}\@#{$query-key} {
                    @include group-item($i);
                }

                .#{$name}-item-push-#{$i}\@#{$query-key} {
                    @include group-item-push($i);
                }

                .#{$name}-item-pull-#{$i}\@#{$query-key} {
                    @include group-item-pull($i);
                }
            }

            .#{$name}-nowrap\@#{$query-key} {
                flex-wrap: nowrap;
            }

            .#{$name}-justify-around\@#{$query-key} {
                justify-content: space-around;
            }

            .#{$name}-justify-between\@#{$query-key} {
                justify-content: space-between;
            }

            .#{$name}-justify-center\@#{$query-key} {
                justify-content: center;
            }

            .#{$name}-justify-end\@#{$query-key} {
                justify-content: flex-end;
            }

            .#{$name}-align-center\@#{$query-key} {
                align-items: center;
            }

            .#{$name}-align-start\@#{$query-key} {
                align-items: flex-start;
            }

            .#{$name}-align-end\@#{$query-key} {
                align-items: flex-end;
            }
        }
    }

    @if mixin-exists('group-hook') {
        @include group-hook($name);
    }
}
